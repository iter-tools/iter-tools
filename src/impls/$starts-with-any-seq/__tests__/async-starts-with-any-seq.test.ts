/**
 * @generated-from ./$starts-with-any-seq.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncStartsWithAnySeq } from 'iter-tools-es';
import { asyncWrap } from '../../../test/async-helpers.js';

describe('asyncStartsWithAnySeq', () => {
  describe('when no sequences are given', () => {
    it('returns false', async () => {
      expect(await asyncStartsWithAnySeq([], asyncWrap([]))).toBe(false);
    });
  });

  describe('when iterable starts with a given sequence', () => {
    it('returns true', async () => {
      expect(await asyncStartsWithAnySeq([asyncWrap([1, 2])], asyncWrap([1, 2, 3]))).toBe(true);
      expect(
        await asyncStartsWithAnySeq(
          [asyncWrap([1, 2]), asyncWrap([1, 2, 3])],
          asyncWrap([1, 2, 3]),
        ),
      ).toBe(true);
      expect(
        await asyncStartsWithAnySeq(
          [asyncWrap([1, 2, 3]), asyncWrap([1, 2])],
          asyncWrap([1, 2, 3]),
        ),
      ).toBe(true);
    });
  });

  describe('when iterable is equal to a given sequence', () => {
    it('returns true', async () => {
      expect(await asyncStartsWithAnySeq([asyncWrap([1, 2, 3])], asyncWrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when iterable is shorter than a matching sequence', () => {
    it('returns false', async () => {
      expect(await asyncStartsWithAnySeq([asyncWrap([1, 2, 3])], asyncWrap([1, 2]))).toBe(false);
    });
  });

  describe('when iterable includes but does not start with a given sequence', () => {
    it('returns false', async () => {
      expect(await asyncStartsWithAnySeq([asyncWrap([2, 3])], asyncWrap([1, 2, 3]))).toBe(false);
    });
  });

  describe('when iterable is empty', () => {
    describe('and any sequence is empty', () => {
      it('returns true', async () => {
        expect(await asyncStartsWithAnySeq([asyncWrap([]), asyncWrap([null])], asyncWrap([]))).toBe(
          true,
        );
        expect(await asyncStartsWithAnySeq([null], asyncWrap([]))).toBe(true);
      });
    });

    describe('and no sequence is empty', () => {
      it('returns false', async () => {
        expect(await asyncStartsWithAnySeq([asyncWrap([undefined])], asyncWrap([]))).toBe(false);
      });
    });
  });

  describe('when same function is specified', () => {
    const same = (a: number, b: number) => Math.abs(a) === Math.abs(b);
    it('uses same value to do comparison', async () => {
      expect(await asyncStartsWithAnySeq(same, [asyncWrap([-1])], asyncWrap([1, 2, 3]))).toBe(true);
      expect(await asyncStartsWithAnySeq(() => false, [asyncWrap([1])], asyncWrap([1, 2, 3]))).toBe(
        false,
      );
    });
  });
});
