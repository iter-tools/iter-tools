/**
 * @generated-from ./$to-object.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncToObject } from 'iter-tools-es';
import { asyncWrap } from '../../../test/async-helpers.js';

describe('asyncToObject', () => {
  describe('when iterable is empty', () => {
    it('returns an empty object', async () => {
      expect(await asyncToObject(null)).toEqual({});
      expect(await asyncToObject(undefined)).toEqual({});
      expect(await asyncToObject(asyncWrap([]))).toEqual({});
    });
  });

  describe('given an iterable of entries', () => {
    it('returns the object with those entries', async () => {
      const entries: Array<[string, string]> = [
        ['foo', 'fox'],
        ['bar', 'box'],
        ['baz', 'rox'],
      ];
      expect(await asyncToObject(asyncWrap(entries))).toEqual({
        foo: 'fox',
        bar: 'box',
        baz: 'rox',
      });
    });
  });

  it('can take a prototype to pass to Object.create', async () => {
    expect(Object.getPrototypeOf(await asyncToObject(asyncWrap([]), null))).toEqual(null);
  });
});
