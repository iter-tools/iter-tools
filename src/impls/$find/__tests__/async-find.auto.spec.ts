/**
 * @generated-from ./async-find.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncFind } from 'iter-tools-es';
import { asyncWrap } from '../../../test/async-helpers.js';

describe('asyncFind', () => {
  describe('when iterable is empty', () => {
    it('returns undefined', async () => {
      expect(await asyncFind((value: any) => value, null)).toBe(undefined);
      expect(await asyncFind((value: any) => value, undefined)).toBe(undefined);
      expect(await asyncFind((value: any) => value, asyncWrap([]))).toBe(undefined);
    });
  });

  describe('when iterable does not contain the desired value', () => {
    it('returns undefined', async () => {
      expect(await asyncFind((_) => false, asyncWrap([1, 2, 3, 4, 5, 6]))).toBe(undefined);
    });
  });

  describe('when iterable contains the desired value', () => {
    it('returns the value', async () => {
      expect(await asyncFind((value) => value === 5, asyncWrap([1, 2, 3, 4, 5, 6]))).toBe(5);
    });
  });

  it('may take an async predicate', async () => {
    expect(await asyncFind(async (value) => value === 5, asyncWrap([1, 2, 3, 4, 5, 6]))).toBe(5);
  });
});
