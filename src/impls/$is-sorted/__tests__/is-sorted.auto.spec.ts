/**
 * @generated-from ./is-sorted.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { isSorted } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

describe('isSorted', () => {
  describe('when iterable is empty', () => {
    it('returns true', () => {
      expect(isSorted(wrap([]))).toEqual(true);
    });
  });

  describe('when iterable contains only a single value', () => {
    it('returns true', () => {
      expect(isSorted(wrap([9000]))).toEqual(true);
    });
  });

  describe('when the values in iterable are sorted', () => {
    it('returns true', () => {
      expect(isSorted((a, b) => b - a, wrap([3, 2, 1]))).toEqual(true);
    });
  });

  describe('when the values in iterable are not sorted', () => {
    it('returns false', () => {
      expect(isSorted((a, b) => b - a, wrap([1, 2, 3]))).toEqual(false);
    });
  });

  describe('when some values in iterable are equal to each other', () => {
    it('returns true', () => {
      expect(isSorted((a, b) => b - a, wrap([3, 2, 2, 2, 1]))).toEqual(true);
    });
  });

  describe('when no comparator is specified', () => {
    it('compares the default comparator', () => {
      expect(isSorted('abc')).toEqual(true);
      expect(isSorted('cba')).toEqual(false);
      expect(isSorted('bbb')).toEqual(true);
    });
  });
});
