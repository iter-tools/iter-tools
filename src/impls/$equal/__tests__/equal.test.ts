/**
 * @generated-from ./$equal.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { equal } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

describe('equal', () => {
  describe('when there is only one iterable', () => {
    it('returns true', () => {
      expect(equal(null)).toBe(true);
      expect(equal(undefined)).toBe(true);
      expect(equal(wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when all values in all iterables are equal', () => {
    it('returns true', () => {
      expect(equal(wrap([]), wrap([]))).toBe(true);
      expect(equal(null, undefined)).toBe(true);
      expect(equal(null, undefined, wrap([]))).toBe(true);
      expect(equal(wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(true);
      expect(equal(wrap([1, 2, 3]), wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(true);
    });
  });

  describe('when all values in some iterables are equal', () => {
    it('returns false', () => {
      expect(equal(wrap([1, 2, 3]), wrap([1, 2, 3]), wrap([1, 2, 4]))).toBe(false);
      expect(equal(wrap([1, 2, 3]), wrap([1, 2, 4]), wrap([1, 2, 3]))).toBe(false);
      expect(equal(wrap([1, 2, 4]), wrap([1, 2, 3]), wrap([1, 2, 3]))).toBe(false);
    });
  });

  describe('when iterables have the same values but different lengths', () => {
    it('returns false', () => {
      expect(equal(wrap([1]), wrap([1]), wrap([1, 2]))).toBe(false);
      expect(equal(wrap([1]), wrap([1, 2]), wrap([1]))).toBe(false);
      expect(equal(wrap([1, 2]), wrap([1]), wrap([1]))).toBe(false);
      expect(equal(wrap([]), wrap([]), wrap([1]))).toBe(false);
      expect(equal(wrap([]), wrap([1]), wrap([]))).toBe(false);
      expect(equal(wrap([1]), wrap([]), wrap([]))).toBe(false);
    });
  });
});
