/**
 * @generated-from ./$wrap.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncWrap } from '@iter-tools/es';
import { asyncWrap as asyncTestWrap, asyncUnwrap } from '../../../test/async-helpers.js';

describe('asyncWrap', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      expect(await asyncUnwrap(asyncWrap(undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncWrap(null))).toEqual([]);
      expect(await asyncUnwrap(asyncWrap(asyncTestWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('yields the values from source', async () => {
      expect(await asyncUnwrap(asyncWrap([1, 2, 3]))).toEqual([1, 2, 3]);
      expect(await asyncUnwrap(asyncWrap(asyncTestWrap([1, 2, 3])))).toEqual([1, 2, 3]);
    });
  });

  it('can be consumed multiple times if its input can', async () => {
    const wrapped = asyncWrap([1, 2, 3]);
    expect(await asyncUnwrap(wrapped)).toEqual([1, 2, 3]);
    expect(await asyncUnwrap(wrapped)).toEqual([1, 2, 3]);
  });
});
