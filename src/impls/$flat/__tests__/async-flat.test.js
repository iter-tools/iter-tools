/**
 * @generated-from ./$flat.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncFlat } from 'iter-tools-es';
import {
  asyncWrapDeep,
  asyncUnwrap,
  asyncUnwrapDeep,
  anyType,
} from '../../../test/async-helpers.js';

describe('asyncFlat', () => {
  it('flats iterable', async () => {
    const iter = asyncFlat(1, asyncWrapDeep([[1, 2], [3, 4], [5]]));
    expect(await asyncUnwrap(iter)).toEqual([1, 2, 3, 4, 5]);
  });

  it('flats iterable (default one level)', async () => {
    const iter = asyncFlat(asyncWrapDeep([[1, 2], [3, 4], [5]]));
    expect(await asyncUnwrap(iter)).toEqual([1, 2, 3, 4, 5]);
  });

  it('flats iterable depth 0', async () => {
    const iter = asyncFlat(0, asyncWrapDeep([[1, 2], [3, 4], [5]]));
    expect(await asyncUnwrapDeep(iter)).toEqual([[1, 2], [3, 4], [5]]);
  });

  it('flats iterable depth 2', async () => {
    const iter = asyncFlat(2, asyncWrapDeep([[1, 2], [3, [4, 5]], [[6]]]));
    expect(await asyncUnwrap(iter)).toEqual([1, 2, 3, 4, 5, 6]);
  });

  it('flats strings', async () => {
    const iter = asyncFlat(2, asyncWrapDeep([['a', 'b'], ['c', ['d', 'e']], [['f']]]));
    expect(await asyncUnwrap(iter)).toEqual(['a', 'b', 'c', 'd', 'e', 'f']);
  });

  it('does not expand string', async () => {
    const iter = asyncFlat(2, asyncWrapDeep(['foo', ['bar', ['baz']]]));
    expect(await asyncUnwrap(iter)).toEqual(['foo', 'bar', 'baz']);
  });

  it('does not treat null as an iterable', async () => {
    const iter = asyncFlat(2, asyncWrapDeep(['foo', null]));
    expect(await asyncUnwrap(iter)).toEqual(['foo', null]);
  });

  it('flats using custom shouldFlat', async () => {
    const shouldFlat = (iter: any) => !(typeof iter === 'string' && iter.length === 1);
    const input = [['a', 'b'], ['c', ['d', 'e']], [['fghi']]];
    const result = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];

    expect(await asyncUnwrap(asyncFlat(shouldFlat, Infinity, input))).toEqual(result);
    expect(await asyncUnwrap(asyncFlat(anyType({ shouldFlat, depth: Infinity }), input))).toEqual(
      result,
    );
  });

  it('may take an async shouldFlat callback', async () => {
    const iter = asyncFlat(
      async (iter) => !(typeof iter === 'string' && iter.length === 1),
      Infinity,
      [['a', 'b'], ['c', ['d', 'e']], [['fghi']]],
    );
    expect(await asyncUnwrap(iter)).toEqual(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']);
  });
});
