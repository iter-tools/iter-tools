/**
 * @generated-from ./$find-best-or.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { findBestOr, firstHighest, firstLowest } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

type Person = {
  name: string;
  age: number;
};

const youngest = {
  name: 'a',
  age: 10,
};
const middle = {
  name: 'b',
  age: 20,
};
const oldest = {
  name: 'c',
  age: 30,
};

const people = [youngest, middle, oldest];

const none = Symbol('none');

describe('findBestOr', () => {
  describe('when source is empty', () => {
    it('should return notFoundValue', () => {
      const mapper = (value: Person) => value.age;
      expect(findBestOr(none, firstHighest, mapper, null)).toEqual(none);
      expect(findBestOr(none, firstHighest, mapper, undefined)).toEqual(none);
      expect(findBestOr(none, firstHighest, mapper, wrap([]))).toEqual(none);
    });
  });

  describe('when source has a single value', () => {
    it('should return that value', () => {
      expect(findBestOr(none, firstHighest, wrap([1]))).toEqual(1);
      expect(findBestOr(none, firstLowest, wrap([1]))).toEqual(1);
    });
  });

  describe('when source has values', () => {
    it('should return the best value according to mapper and compare function', () => {
      expect(findBestOr(none, firstHighest, (p) => p.age, wrap(people))).toEqual(oldest);
      expect(findBestOr(none, firstLowest, (p) => p.age, wrap(people))).toEqual(youngest);
    });
  });
});
