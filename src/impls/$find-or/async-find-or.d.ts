/**
 * @generated-from ./$find-or.d.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { AsyncWrappable } from '../../types/async-iterable';

declare function asyncFindOr<N, T, S extends T>(
  notFoundValue: N,
  predicate: (value: T, i: number) => value is S,
): (iterable: AsyncWrappable<T>) => Promise<S | N>;

declare function asyncFindOr<N, T>(
  notFoundValue: N,
  predicate: (value: T, i: number) => boolean | Promise<boolean>,
): (iterable: AsyncWrappable<T>) => Promise<T | N>;

declare function asyncFindOr<N, T, S extends T>(
  notFoundValue: N,
  predicate: (value: T, i: number) => value is S,
  iterable: AsyncWrappable<T>,
): Promise<S | N>;

declare function asyncFindOr<N, T>(
  notFoundValue: N,
  predicate: (value: T, i: number) => boolean | Promise<boolean>,
  iterable: AsyncWrappable<T>,
): Promise<T | N>;

export { asyncFindOr };
