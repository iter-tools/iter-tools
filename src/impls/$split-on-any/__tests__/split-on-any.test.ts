/**
 * @generated-from ./$split-on-any.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { splitOnAny } from 'iter-tools-es';
import { wrap, unwrapDeep } from '../../../test/helpers.js';

describe('splitOnAny', () => {
  it('should split on an occurance of any value', () => {
    expect(unwrapDeep(splitOnAny([null, undefined], wrap([1, null, undefined, 3])))).toEqual([
      [1],
      [],
      [3],
    ]);
  });

  it('does not split when passed no values', () => {
    expect(unwrapDeep(splitOnAny([], wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
  });

  it('passes through the empty iterable', () => {
    expect(unwrapDeep(splitOnAny([], null))).toEqual([]);
  });

  describe('when same function is specified', () => {
    const same = (a: number, b: number) => Math.abs(a) === Math.abs(b);
    it('uses same value to do comparison', () => {
      expect(unwrapDeep(splitOnAny(same, [2], wrap([1, 2, 3])))).toEqual([[1], [3]]);
      expect(unwrapDeep(splitOnAny(() => false, [2], wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
    });
  });

  describe('when source is a string', () => {
    it('warns', () => {
      splitOnAny([], 'abc');
      expect(console.warn).callsMatchSnapshot();
    });
  });
});
