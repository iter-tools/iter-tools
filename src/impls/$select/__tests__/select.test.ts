/**
 * @generated-from ./$select.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { select } from 'iter-tools-es';
import { wrap } from '../../../test/helpers.js';

const maxSelector = (a: number, b: number) => b > a;
const minSelector = (a: number, b: number) => b < a;

describe('select', () => {
  describe('when source is empty', () => {
    it('should return undefined', () => {
      expect(select(maxSelector, null)).toEqual(undefined);
      expect(select(maxSelector, undefined)).toEqual(undefined);
      expect(select(maxSelector, wrap([]))).toEqual(undefined);
    });
  });

  describe('when source has a single value', () => {
    it('should return that value', () => {
      expect(select(maxSelector, wrap([1]))).toEqual(1);
      expect(select(minSelector, wrap([1]))).toEqual(1);
    });
  });

  describe('when source has values', () => {
    it('should return the best value, according to selector function', () => {
      expect(select(maxSelector, wrap([1, 2, 3]))).toEqual(3);
      expect(select(minSelector, wrap([1, 2, 3]))).toEqual(1);
    });
  });
});
