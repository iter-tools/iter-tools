/**
 * @generated-from ./$spliterator.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { PartsIterator, split } from '../spliterator';
import { wrap } from '../../__tests__/__framework__/wrap';

describe('spliterator', () => {
  function* testSpliterator() {
    const sourceIterator = wrap(['first', 'second']);
    let sourceDone = false;
    try {
      yield sourceIterator.next().value;
      yield split;
      yield sourceIterator.next().value;
      sourceIterator.next();
      sourceDone = true;
    } finally {
      if (!sourceDone) {
        sourceIterator.return();
      }
    }
  }

  function* testSplit() {
    yield* new PartsIterator(testSpliterator());
  }

  // The assertions in these tests are part of the cleanup defined by $wrap

  it('source is cleaned up if no values are taken', () => {
    const parts = testSplit();
    parts.next();
    parts.return();
  });

  it('source is cleaned up if part manager is closed then active part', () => {
    const parts = testSplit();
    const part = parts.next().value;
    part.next();
    parts.return();
    part.return();
  });

  it('source is cleaned up if active part is closed then part manager', () => {
    const parts = testSplit();
    const part = parts.next().value;
    part.next();
    part.return();
    parts.return();
  });

  it('source is cleaned up if active part is done then part manager is closed', () => {
    const parts = testSplit();
    const part = parts.next().value;
    part.next();
    part.next();
    parts.return();
  });

  it('source is cleaned up if part manager is closed then active part is done', () => {
    const parts = testSplit();
    const part = parts.next().value;
    parts.return();
    part.next();
    part.next();
  });

  it('source is cleaned up if only parts are consumed', () => {
    const parts = testSplit();
    parts.next();
    parts.next();
    parts.next();
  });
});
