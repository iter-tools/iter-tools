/**
 * @generated-from ./$peekerator.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncEnsureIterable, asyncCallReturn } from './async-iterable';

const _ = Symbol.for('_');

export class AsyncPeekerator {
  static async from(iterable, ...args) {
    const iterator = asyncEnsureIterable(iterable)[Symbol.asyncIterator]();
    const first = await iterator.next();
    return new this(iterator, first, ...args);
  }

  constructor(iterator, first) {
    this[_] = {
      iterator,
      current: first,
      index: 0,
    };
  }

  get current() {
    return this[_].current;
  }

  get value() {
    return this[_].current.value;
  }

  get done() {
    return this[_].current.done;
  }

  get index() {
    return this[_].current.index;
  }

  async advance() {
    const this_ = this[_];
    this_.index++;
    this_.current = await this_.iterator.next();
  }

  async return() {
    const this_ = this[_];
    if (!this.done) {
      await asyncCallReturn(this_.iterator);
    }
    this_.current = { value: undefined, done: true };
  }
}
