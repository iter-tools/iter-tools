/**
 * @generated-from ./$interleave.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { ensureIterable, iterableCurry } from './internal/iterable';
import InterleaveBuffer from './internal/interleave/buffer';
import makeCanTakeAny from './internal/interleave/can-take-any';

function* interleave(generatorFn, iterables) {
  const buffers = iterables.map(
    (iterable, i) => new InterleaveBuffer(ensureIterable(iterable)[Symbol.iterator](), i),
  );

  try {
    yield* generatorFn(makeCanTakeAny(buffers), ...buffers);
  } finally {
    for (const buffer of buffers) {
      if (buffer.canTake() && typeof buffer._iterator.return === 'function') {
        buffer._iterator.return();
      }
    }
  }
}

export default iterableCurry(interleave, {
  variadic: true,
});
