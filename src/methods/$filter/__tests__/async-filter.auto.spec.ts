/**
 * @generated-from ./async-filter.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncFilter } from '../../..';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers';

describe('asyncFilter', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      const pred = (v: any) => v;
      expect(await asyncUnwrap(asyncFilter(pred, null))).toEqual([]);
      expect(await asyncUnwrap(asyncFilter(pred, undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncFilter(pred, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('yields items for which predicate(value, i) returns true', async () => {
      expect(
        await asyncUnwrap(asyncFilter((value, i) => value === i, asyncWrap([1, 1, 2, 3, 5, 8]))),
      ).toEqual([1, 2, 3]);
    });
  });

  it('may take an async predicate', async () => {
    const iter = asyncFilter(async item => item % 2 === 0, asyncWrap([1, 2, 3, 4, 5, 6]));
    expect(await asyncUnwrap(iter)).toEqual([2, 4, 6]);
  });
});
