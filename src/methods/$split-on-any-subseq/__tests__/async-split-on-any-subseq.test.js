/**
 * @generated-from ./$split-on-any-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncSplitOnAnySubseq, asyncToArray } from '../../..';
import { asyncWrap, asyncUnwrapDeep } from '../../../test/async-helpers';

describe('asyncSplitOnAnySubseq', () => {
  describe('when there are no sequences', () => {
    it('yields a single part containing the values from source', async () => {
      expect(await asyncUnwrapDeep(asyncSplitOnAnySubseq([], asyncWrap([1, 2, 3])))).toEqual([
        [1, 2, 3],
      ]);
    });
  });

  describe('when source is empty', () => {
    it('yields no parts', async () => {
      expect(await asyncToArray(asyncSplitOnAnySubseq([null], null))).toEqual([]);
      expect(await asyncToArray(asyncSplitOnAnySubseq([null], undefined))).toEqual([]);
      expect(await asyncToArray(asyncSplitOnAnySubseq([null], asyncWrap([])))).toEqual([]);
    });
  });

  describe('when no sequence is not present in source', () => {
    it('yields a single part containing the values from source', async () => {
      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([asyncWrap([undefined])], asyncWrap([1, 2, 3])),
        ),
      ).toEqual([[1, 2, 3]]);
    });
  });

  describe('when a sequence is equal to source', () => {
    it('yields two empty parts', async () => {
      expect(
        await asyncUnwrapDeep(asyncSplitOnAnySubseq([asyncWrap([2, 2])], asyncWrap([2, 2]))),
      ).toEqual([[], []]);
    });
  });

  describe('when sequences are present s times in source', () => {
    it('yields s+1 parts', async () => {
      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([asyncWrap([1, -1])], asyncWrap([1, 1, -1, 2, 1, -1, 3])),
        ),
      ).toEqual([[1], [2], [3]]);
    });
  });

  describe('when sequences overlap with each other in source', () => {
    it('should only split once', async () => {
      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 3], [3, 2]], asyncWrap([1, 2, 3, 2, 2, 3, 2, 3, 4])),
        ),
      ).toEqual([[1], [2], [], [4]]);

      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4])),
        ),
      ).toEqual([[1], [3, 4]]);
    });
  });

  describe('when more than one sequence matches', () => {
    it('consume the longest sequence that matches', async () => {
      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 2, 3], [2, 3]], asyncWrap([1, 2, 2, 3, 3, 4])),
        ),
      ).toEqual([[1], [3, 4]]);

      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4])),
        ),
      ).toEqual([[1], [3, 4]]);

      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 2, 3], [2, 2]], asyncWrap([1, 2, 2, 3, 3, 4])),
        ),
      ).toEqual([[1], [3, 4]]);

      expect(
        await asyncUnwrapDeep(
          asyncSplitOnAnySubseq([[2, 2], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4])),
        ),
      ).toEqual([[1], [3, 4]]);
    });
  });

  describe('when empty sequences are present', () => {
    it('ignores them', async () => {
      expect(await asyncUnwrapDeep(asyncSplitOnAnySubseq([null], asyncWrap([1, 2, 3])))).toEqual([
        [1, 2, 3],
      ]);
      expect(
        await asyncUnwrapDeep(asyncSplitOnAnySubseq([undefined], asyncWrap([1, 2, 3]))),
      ).toEqual([[1, 2, 3]]);
      expect(
        await asyncUnwrapDeep(asyncSplitOnAnySubseq([asyncWrap([])], asyncWrap([1, 2, 3]))),
      ).toEqual([[1, 2, 3]]);
      expect(
        await asyncUnwrapDeep(asyncSplitOnAnySubseq([null, asyncWrap([2])], asyncWrap([1, 2, 3]))),
      ).toEqual([[1], [3]]);
    });
  });
});
