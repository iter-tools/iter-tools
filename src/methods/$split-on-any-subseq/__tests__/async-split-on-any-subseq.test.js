/**
 * @generated-from ./$split-on-any-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncSplitOnAnySubseq } from '../../..';
import { asyncUnwrapDeep as asyncUw } from '../../../__tests__/async-helpers';
import { asyncWrap } from '../../../__tests__/__framework__/async-wrap';
describe('asyncSplitOnAnySubseq', () => {
  it('can split on any of many possible subsequences', async () => {
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 2], [3, 3]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [], [4]]);
  });
  it('works when the separator is the only thing in the sequence', async () => {
    expect(await asyncUw(asyncSplitOnAnySubseq([[2, 2], [3, 3]], asyncWrap([2, 2])))).toEqual([
      [],
      [],
    ]);
  });
  it('splits on the longest subsequence that matches', async () => {
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 2, 3], [2, 3]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 2, 3], [2, 2]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 2], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [3, 4]]);
  });
  it('should only start matching again after a consumed split ends', async () => {
    expect(
      await asyncUw(
        asyncSplitOnAnySubseq([[2, 3], [3, 2]], asyncWrap([1, 2, 3, 2, 2, 3, 2, 3, 4])),
      ),
    ).toEqual([[1], [2], [], [4]]);
    expect(
      await asyncUw(asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], asyncWrap([1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [3, 4]]);
  });
  it('does not split on the empty subsequence', async () => {
    expect(await asyncUw(asyncSplitOnAnySubseq([[], [null]], asyncWrap([1, 2, null, 4])))).toEqual([
      [1, 2],
      [4],
    ]);
  });
  it('passes through the empty iterable', async () => {
    expect(await asyncUw(asyncSplitOnAnySubseq([], null))).toEqual([]);
  });
  it('the empty string is an empty iterable', async () => {
    expect(await asyncUw(asyncSplitOnAnySubseq([], ''))).toEqual([]);
  });
});
