/**
 * @generated-from ./async-split-on-any-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncSplitOnAnySubseq, asyncMap, asyncToArray } from '../../..';
describe('asyncSplitOnAnySubseq', () => {
  it('can split on any of many possible subsequences', async () => {
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 2], [3, 3]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [], [4]]);
  });
  it('splits on the longest subsequence that matches', async () => {
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 2, 3], [2, 3]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 2, 3], [2, 2]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 2], [2, 2, 3]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [3, 4]]);
  });
  it('should only start matching again after a consumed split ends', async () => {
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 3], [3, 2]], [1, 2, 3, 2, 2, 3, 2, 3, 4]),
        ),
      ),
    ).toEqual([[1], [2], [], [4]]);
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[2, 3], [2, 2, 3]], [1, 2, 2, 3, 3, 4]),
        ),
      ),
    ).toEqual([[1], [3, 4]]);
  });
  it('does not split on the empty subsequence', async () => {
    expect(
      await asyncToArray(
        asyncMap(
          group => asyncToArray(group),
          asyncSplitOnAnySubseq([[], [null]], [1, 2, null, 4]),
        ),
      ),
    ).toEqual([[1, 2], [4]]);
  });
  it('passes through the empty iterable', async () => {
    expect(await asyncToArray(asyncSplitOnAnySubseq([], null))).toEqual([]);
  });
  it('the empty string is an empty iterable', async () => {
    expect(await asyncToArray(asyncSplitOnAnySubseq([], ''))).toEqual([]);
  });
});
