/**
 * @generated-from ./split-on-any-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { splitOnAnySubseq, map, toArray } from '../../..';
describe('splitOnAnySubseq', () => {
  it('can split on any of many possible subsequences', () => {
    expect(
      toArray(map(group => toArray(group), splitOnAnySubseq([[2, 2], [3, 3]], [1, 2, 2, 3, 3, 4]))),
    ).toEqual([[1], [], [4]]);
  });
  it('splits on the longest subsequence that matches', () => {
    expect(
      toArray(
        map(group => toArray(group), splitOnAnySubseq([[2, 2, 3], [2, 3]], [1, 2, 2, 3, 3, 4])),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      toArray(
        map(group => toArray(group), splitOnAnySubseq([[2, 3], [2, 2, 3]], [1, 2, 2, 3, 3, 4])),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      toArray(
        map(group => toArray(group), splitOnAnySubseq([[2, 2, 3], [2, 2]], [1, 2, 2, 3, 3, 4])),
      ),
    ).toEqual([[1], [3, 4]]);
    expect(
      toArray(
        map(group => toArray(group), splitOnAnySubseq([[2, 2], [2, 2, 3]], [1, 2, 2, 3, 3, 4])),
      ),
    ).toEqual([[1], [3, 4]]);
  });
  it('should only start matching again after a consumed split ends', () => {
    expect(
      toArray(
        map(
          group => toArray(group),
          splitOnAnySubseq([[2, 3], [3, 2]], [1, 2, 3, 2, 2, 3, 2, 3, 4]),
        ),
      ),
    ).toEqual([[1], [2], [], [4]]);
    expect(
      toArray(
        map(group => toArray(group), splitOnAnySubseq([[2, 3], [2, 2, 3]], [1, 2, 2, 3, 3, 4])),
      ),
    ).toEqual([[1], [3, 4]]);
  });
  it('does not split on the empty subsequence', () => {
    expect(
      toArray(map(group => toArray(group), splitOnAnySubseq([[], [null]], [1, 2, null, 4]))),
    ).toEqual([[1, 2], [4]]);
  });
  it('passes through the empty iterable', () => {
    expect(toArray(splitOnAnySubseq([], null))).toEqual([]);
  });
  it('the empty string is an empty iterable', () => {
    expect(toArray(splitOnAnySubseq([], ''))).toEqual([]);
  });
  describe('given a string', () => {
    it('should split on every item which is equal to the on argument', () => {
      expect(toArray(splitOnAnySubseq('Ø', '11Ø22Ø33'))).toEqual(['11', '22', '33']);
    });
  });
});
