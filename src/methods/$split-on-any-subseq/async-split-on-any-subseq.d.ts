/**
 * @generated-from ./$split-on-any-subseq.d.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { SourceIterable as SyncSourceIterable } from '../../types/iterable';
import { AsyncSourceIterable, AsyncResultIterable } from '../../types/async-iterable'; // curried
// prettier-ignore

declare function asyncSplitOnAnySubseq(separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<string>>, compareEquality?: (value: string, item: string) => boolean): (source: string) => AsyncResultIterable<string>;
declare function asyncSplitOnAnySubseq(
  separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<any>>,
): <T>(source: AsyncSourceIterable<T>) => AsyncResultIterable<AsyncResultIterable<T>>;
declare function asyncSplitOnAnySubseq<V, T>(
  separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<V>>,
  compareEquality: (value: V, item: T) => boolean,
): (source: AsyncSourceIterable<T>) => AsyncResultIterable<AsyncResultIterable<T>>; // noncurried
// prettier-ignore

declare function asyncSplitOnAnySubseq(separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<string>>, compareEquality: (value: string, item: string) => boolean, source: string): AsyncResultIterable<string>; // prettier-ignore

declare function asyncSplitOnAnySubseq(
  separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<string>>,
  source: string,
): AsyncResultIterable<string>;
declare function asyncSplitOnAnySubseq<V, T>(
  separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<V>>,
  compareEquality: (value: V, item: T) => boolean,
  source: AsyncSourceIterable<T>,
): AsyncResultIterable<AsyncResultIterable<T>>;
declare function asyncSplitOnAnySubseq<T>(
  separatorSubseqs: SyncSourceIterable<AsyncSourceIterable<any>>,
  source: AsyncSourceIterable<T>,
): AsyncResultIterable<AsyncResultIterable<T>>;
export default asyncSplitOnAnySubseq;
