/**
 * @generated-from ./$split-on-any-subseq.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { iterableCurry } from '../../internal/iterable';
import { subseqsToArray } from '../../internal/any-subseq';
import { startsWithSubseq } from '../$starts-with-subseq/starts-with-subseq';
import { leadingWindow } from '../$leading-window/leading-window';
import { spliterate } from '../$spliterate/spliterate';

function getMatchingLength(buffer, separatorSubseqs) {
  for (const subsequence of separatorSubseqs) {
    if (startsWithSubseq(buffer, subsequence)) {
      return subsequence.length;
    }
  }

  return 0;
}

function* anySubseqSpliterator(split, { separatorSubseqs }, source) {
  const maxMatchLength = separatorSubseqs.reduce((max, { length }) => Math.max(max, length), 1);

  let skip = 0;

  for (const buffer of leadingWindow(source, maxMatchLength, { useFiller: false })) {
    if (skip > 0) {
      skip--;
      continue;
    }
    const matchingLength = getMatchingLength(buffer, separatorSubseqs);

    if (matchingLength > 0) {
      yield split;
      skip = matchingLength - 1;
    } else {
      yield buffer.get(0);
    }
  }
}

export function* splitOnAnySubseq(source, separatorSubseqs) {
  const separatorSubseqsArr = subseqsToArray(separatorSubseqs).filter(s => s.length > 0);

  yield* spliterate(source, anySubseqSpliterator, {
    separatorSubseqs: separatorSubseqsArr.sort((a, b) => b.length - a.length),
  });
}

export default iterableCurry(splitOnAnySubseq);
