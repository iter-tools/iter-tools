/**
 * @generated-from ./$compress.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { compress } from '../../..';
import { wrap, unwrap } from '../../../test/helpers';

describe('compress', () => {
  describe('when source is empty', () => {
    it('yields no values', () => {
      expect(unwrap(compress(null, null))).toEqual([]);
      expect(unwrap(compress(undefined, undefined))).toEqual([]);
      expect(unwrap(compress(wrap([]), wrap([])))).toEqual([]);
    });
  });

  describe('when source and included are the same size', () => {
    it('yields values for which included is truthy', () => {
      expect(unwrap(compress(wrap([1, 2, 3]), wrap([true, false, true])))).toEqual([1, 3]);

      // prettier-ignore
      // @ts-ignore
      expect((unwrap(compress(wrap([1, 2, 3]), wrap([1, 0, 'true']))))).toEqual([
          1,
          3,
        ]);
    });
  });

  describe('when source is larger than included', () => {
    it('yields only as many values as are in included', () => {
      const source = wrap([1, 2, 3, 4]);
      const included = wrap([true, true]);
      expect(unwrap(compress(source, included))).toEqual([1, 2]);
    });
  });

  describe('when included is larger than source', () => {
    it('yields only as many values as are in source', () => {
      const source = wrap([1, 2, 3]);
      const included = wrap([true, true, true, true, true]);
      expect(unwrap(compress(source, included))).toEqual([1, 2, 3]);
    });
  });
});
