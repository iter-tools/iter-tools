/**
 * @generated-from ./$spliterate.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { spliterate } from '../../..';
import { unwrapDeep as uw } from '../../../__tests__/helpers';
import { wrap } from '../../../__tests__/__framework__/wrap';
import { split } from '../spliterate';

function* identityStrategy(_split: any, _options: any, source: any) {
  yield* source;
}

describe('spliterate', () => {
  const testSpliterator = spliterate(identityStrategy, {});

  describe('when spliterator is empty', () => {
    it('yields no groups', () => {
      expect(uw(testSpliterator([]))).toEqual([]);
    });
  });

  describe('when spliterator contains only a split', () => {
    it('yields two empty groups', () => {
      expect(uw(testSpliterator([split]))).toEqual([[], []]);
    });
  });

  describe('when spliterator contains two splits', () => {
    it('yields three empty groups', () => {
      expect(uw(testSpliterator([split, split]))).toEqual([[], [], []]);
    });
  });

  describe('when spliterator contains a trailing split', () => {
    it('yields three empty groups', () => {
      expect(uw(testSpliterator([null, split]))).toEqual([[null], []]);
    });
  });

  describe('when spliterator contains a leading split', () => {
    it('yields three empty groups', () => {
      expect(uw(testSpliterator([split, null]))).toEqual([[], [null]]);
    });
  });

  describe('abrupt termination', () => {
    // The assertions in these tests are part of the cleanup defined by $wrap
    const source = ['first', split, 'second'];

    it("source is cleaned up if we're done before we started", () => {
      const parts = testSpliterator(wrap(source));
      parts.return();
    });

    it('source is cleaned up if part manager is closed then active part', () => {
      const parts = testSpliterator(wrap(source));
      const part = parts.next().value;
      part.next();
      parts.return();
      part.return();
    });

    it('source is cleaned up if active part is closed then part manager', () => {
      const parts = testSpliterator(wrap(source));
      const part = parts.next().value;
      part.next();
      part.return();
      parts.return();
    });

    it('source is cleaned up if active part is done then part manager is closed', () => {
      const parts = testSpliterator(wrap(source));
      const part = parts.next().value;
      part.next();
      part.next();
      parts.return();
    });

    it('source is cleaned up if part manager is closed then active part is done', () => {
      const parts = testSpliterator(wrap(source));
      const part = parts.next().value;
      parts.return();
      part.next();
      part.next();
    });

    it('source is cleaned up if only parts are consumed', () => {
      const parts = testSpliterator(wrap(source));
      parts.next();
      parts.next();
      parts.next();
    });
  });
});
