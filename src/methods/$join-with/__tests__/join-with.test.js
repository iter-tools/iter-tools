/**
 * @generated-from ./$join-with.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { joinWith } from '../../..';
import { wrapDeep, unwrap } from '../../../test/helpers';

describe('joinWith', () => {
  it('should join each group with the provided value', () => {
    expect(unwrap(joinWith(null, wrapDeep([[1], [2], [3]])))).toEqual([1, null, 2, null, 3]);
  });

  it('should have two adjacent separators when encountering an empty group', () => {
    expect(unwrap(joinWith(null, wrapDeep([[1], [], [3]])))).toEqual([1, null, null, 3]);
  });

  it('should yield a single separator when joining two empty groups', () => {
    expect(unwrap(joinWith(null, wrapDeep([[], []])))).toEqual([null]);
  });

  it('passes through the empty iterable', () => {
    expect(unwrap(joinWith(0, null))).toEqual([]);
    expect(unwrap(joinWith(0, undefined))).toEqual([]);
    expect(unwrap(joinWith(0, wrapDeep([])))).toEqual([]);
  });

  describe('when source is a string', () => {
    it('warns', () => {
      joinWith(null, 'abc');
      expect(console.warn).callsMatchSnapshot();
    });
  });
});
