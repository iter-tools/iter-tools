/**
 * @generated-from ./join-with-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { joinWithSubseq, toArray } from '../../..';
describe('joinWithSubseq', () => {
  describe('joining on the empty subseq', () => {
    it('should include the items from every group', () => {
      expect(toArray(joinWithSubseq([], [[1], [2], [3]]))).toEqual([1, 2, 3]);
    });
    it('should contain no output for an empty group', () => {
      expect(toArray(joinWithSubseq([], [[1], [], [3]]))).toEqual([1, 3]);
    });
  });
  it('should yield a single separator when joining two empty groups', () => {
    expect(toArray(joinWithSubseq([1, 2], [[], []]))).toEqual([1, 2]);
  });
  it('passes through the empty iterable', () => {
    expect(toArray(joinWithSubseq([], null))).toEqual([]);
  });
  it('passes through the empty string', () => {
    expect(toArray(joinWithSubseq([], ''))).toEqual([]);
  });
  describe('given a string', () => {
    it('should split on every item which is equal to the on argument', () => {
      expect(toArray(joinWithSubseq([], ['11', '22', '33']))).toEqual([
        '1',
        '1',
        '2',
        '2',
        '3',
        '3',
      ]);
    });
  });
});
