/**
 * @generated-from ./$map.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncMap } from '../../..';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers';

describe('asyncMap', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      const func = (value: any) => value * 2;
      expect(await asyncUnwrap(asyncMap(func, null))).toEqual([]);
      expect(await asyncUnwrap(asyncMap(func, undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncMap(func, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has values', () => {
    it('returns func(value, i) for each value in source', async () => {
      expect(await asyncUnwrap(asyncMap((value, i) => value + i, asyncWrap([1, 2, 3])))).toEqual([
        1,
        3,
        5,
      ]);
    });
  });

  it('can take an async func', async () => {
    expect(await asyncUnwrap(asyncMap(async value => value * 2, asyncWrap([1, 2, 3])))).toEqual([
      2,
      4,
      6,
    ]);
  });
});
