/**
 * @generated-from ./$iterable-starts-with.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import asyncToAnySubseq from '../../internal/async-to-any-subseq';
import { asyncZipAll } from '../$zip-all/async-zip-all';
import { asyncWrap } from '../$wrap/async-wrap';
import { simpleSlice } from '../$slice/slice';
const noItem = {};
const zipAllConfig = {
  filler: noItem,
};

async function asyncStartsWith(iterable, config, value) {
  const subseqs = await asyncToAnySubseq(config, value);
  const wrappedSubseqs = subseqs.map(asyncWrap);
  let states = subseqs.map(_ => ({
    matches: true,
    done: false,
  }));

  for await (const allItems of asyncZipAll([iterable, ...wrappedSubseqs], zipAllConfig)) {
    const item = allItems[0];
    let i = -1;
    let allDone = true;
    let anyMatched = false;

    for (const subseqItem of simpleSlice(allItems, 1, Infinity)) {
      const state = states[++i];
      state.done = subseqItem === noItem;
      state.matches = state.matches && subseqItem === item;
      allDone = allDone && state.done;
      anyMatched = anyMatched || state.matches;
    }

    if (allDone) break;
    if (!anyMatched) return false;
  }

  return true;
}

export default asyncStartsWith;
