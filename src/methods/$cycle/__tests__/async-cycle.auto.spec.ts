/**
 * @generated-from ./async-cycle.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncCycle, asyncSlice, asyncToArray, asyncWrap, range } from '../../..';
describe('asyncCycle', () => {
  it('return infinite cycle', async () => {
    expect(await asyncToArray(asyncSlice(0, 6, asyncCycle(asyncWrap([1, 2, 3]))))).toEqual([
      1,
      2,
      3,
      1,
      2,
      3,
    ]);
  });
  it('can be reused', async () => {
    const myCycle = asyncCycle(range(1, 4));
    expect(await asyncToArray(asyncSlice(0, 7, myCycle))).toEqual([1, 2, 3, 1, 2, 3, 1]);
    expect(await asyncToArray(asyncSlice(0, 7, myCycle))).toEqual([1, 2, 3, 1, 2, 3, 1]);
  });
  it('can cycle a limited number of times', async () => {
    expect(await asyncToArray(asyncCycle(3, asyncWrap([1, 2, 3])))).toEqual([
      1,
      2,
      3,
      1,
      2,
      3,
      1,
      2,
      3,
    ]);
  });
});
