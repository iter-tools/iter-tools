/**
 * @generated-from ./$group.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { group } from '../../..';
import { wrap, unwrap, unwrapDeep } from '../../../test/helpers';

describe('group', () => {
  describe('when source is empty', () => {
    it('yields no groups', () => {
      expect(unwrapDeep(group(null))).toEqual([]);
      expect(unwrapDeep(group(undefined))).toEqual([]);
      expect(unwrapDeep(group(wrap([])))).toEqual([]);
    });
  });

  describe('when values from source cannot be grouped', () => {
    it('yields a group for each value', () => {
      expect(unwrapDeep(group(wrap([1, 2, 3])))).toEqual([[1, [1]], [2, [2]], [3, [3]]]);
    });
  });

  describe('when source contains subsequent values belonging to the same group', () => {
    it('coalesces values into groups', () => {
      expect(unwrapDeep(group('aaa'))).toEqual([['a', ['a', 'a', 'a']]]);
      expect(unwrapDeep(group('bbabb'))).toEqual([
        ['b', ['b', 'b']],
        ['a', ['a']],
        ['b', ['b', 'b']],
      ]);
    });
  });

  describe('when groups are consumed out of order', () => {
    it('throws', () => {
      const iter = group('AB');
      const [, As] = iter.next().value;
      const [, Bs] = iter.next().value;

      unwrap(Bs);

      expect(
        (() => {
          try {
            unwrap(As);
          } catch (e) {
            return e;
          }
        })(),
      ).toMatchSnapshot();
    });
  });
});
