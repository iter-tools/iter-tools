/**
 * @generated-from ./range.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { range } from '../../..';
describe('range', () => {
  describe('with positional arguments', () => {
    it('return simple range', () => {
      expect(Array.from(range(3))).toEqual([0, 1, 2]);
    });
    it('return simple range with start/end', () => {
      expect(Array.from(range(3, 6))).toEqual([3, 4, 5]);
    });
    it('return simple range with start/end and step', () => {
      expect(Array.from(range(3, 6, 2))).toEqual([3, 5]);
    });
  });
  describe('with options', () => {
    it('return simple range', () => {
      expect(
        Array.from(
          range({
            end: 3,
          }),
        ),
      ).toEqual([0, 1, 2]);
    });
    it('return simple range with start/end', () => {
      expect(
        Array.from(
          range({
            start: 3,
            end: 6,
          }),
        ),
      ).toEqual([3, 4, 5]);
    });
    it('can be reused', () => {
      const myRange = range({
        start: 3,
        end: 6,
      });
      expect(Array.from(myRange)).toEqual([3, 4, 5]);
      expect(Array.from(myRange)).toEqual([3, 4, 5]);
    });
    it('return simple range with start/end and step', () => {
      expect(
        Array.from(
          range({
            start: 3,
            end: 6,
            step: 2,
          }),
        ),
      ).toEqual([3, 5]);
    });
    it('return empty array for negative end', () => {
      expect(
        Array.from(
          range({
            end: -2,
          }),
        ),
      ).toEqual([]);
    });
    it('return empty array for negative end', () => {
      expect(
        Array.from(
          range({
            start: -2,
            end: -5,
          }),
        ),
      ).toEqual([]);
    });
    it('return backward count', () => {
      expect(
        Array.from(
          range({
            start: -2,
            end: -5,
            step: -1,
          }),
        ),
      ).toEqual([-2, -3, -4]);
    });
  });
});
