/**
 * @generated-from ./$equal-factory.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { coerceValues } from './internal/coerce-values';
import { allEqual } from './internal/all-equal';
import { iterableEqual } from './internal/iterable-equal';

function validateOptions(options = {}) {
  const _options =
    typeof options === 'function'
      ? {
          compareEquality: options,
        }
      : options;

  const {
    compareEquality = Object.is,
    iterableNullish = true,
    shouldCompareValues = true,
    syncEqualsAsync = true,
  } = _options;
  return {
    compareEquality,
    iterableNullish,
    shouldCompareValues,
    syncEqualsAsync,
  };
}

export function equalFactory(options = {}) {
  const _options = validateOptions(options);

  const { compareEquality, iterableNullish, shouldCompareValues, syncEqualsAsync } = _options;
  return (...values) => {
    if (!values.length) {
      throw new Error(`${'equal'} received no values to compare.`);
    }

    const [failed, comparingIterables, coercedValues] = coerceValues(
      values,
      iterableNullish,
      syncEqualsAsync,
    );
    return (
      !failed &&
      (comparingIterables
        ? iterableEqual(coercedValues, compareEquality)
        : shouldCompareValues && allEqual(values, compareEquality))
    );
  };
} // export default options => {
//   return $equalFactory(validateOptions(options));
// };

export default equalFactory;
