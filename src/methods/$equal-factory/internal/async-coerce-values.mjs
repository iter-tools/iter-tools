/**
 * @generated-from ./$coerce-values.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncIsIterable } from '../../../internal/async-iterable';
import { asyncWrap } from '../../$wrap/async-wrap';
const empty = asyncWrap([]);
export function coerceValues(values, iterableNullish, syncEqualsAsync) {
  const coercedValues = [];
  let failed = false;
  let anyIterable = false;
  let anySync = false;
  let allIterable = true;
  let allSync = true;

  for (const value of values) {
    const valueIsNullIterable = iterableNullish && value == null; // `"abc"` is considered primitive, not equal to `["a", "b", "c"]`.
    // This is because few if any APIs consider those expressions equivalent.
    // Our methods take care to return strings when possible instead of character iterables.

    const valueIsIterable = asyncIsIterable(value) && !(typeof value === 'string');
    const valueIsSync = valueIsIterable && !value[Symbol.asyncIterator]; // prettier-ignore

    coercedValues.push(
      valueIsNullIterable ? empty : false || valueIsSync ? asyncWrap(value) : value,
    );
    const coercedValueIsIterable = valueIsNullIterable || valueIsIterable;
    anyIterable = anyIterable || coercedValueIsIterable;
    allIterable = allIterable && coercedValueIsIterable;
    anySync = anySync || valueIsSync;
    allSync = allSync && valueIsSync;
  }

  if ((anyIterable && !allIterable) || (true && !syncEqualsAsync && anySync && !allSync)) {
    failed = true;
  }

  return [failed, anyIterable, coercedValues];
}
