/**
 * @generated-from ./$window.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncUnwrapDeep as asyncUw } from '../../../__tests__/async-helpers';
import { asyncWindow } from '../../..';
describe('asyncWindow', () => {
  it('frames iterable', async () => {
    const result = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, undefined], [5, undefined, undefined]];
    expect(await asyncUw(asyncWindow(3, [1, 2, 3, 4, 5]))).toEqual(result);
    const opts: any = {
      size: 3,
    };
    expect(await asyncUw(asyncWindow(opts, [1, 2, 3, 4, 5]))).toEqual(result);
  });
  it('frames iterable', async () => {
    const result = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 'x'], [5, 'x', 'x']];
    expect(
      await asyncUw(
        asyncWindow(
          3,
          {
            filler: 'x',
          },
          [1, 2, 3, 4, 5],
        ),
      ),
    ).toEqual(result);
    const opts: any = {
      size: 3,
      filler: 'x',
    };
    expect(await asyncUw(asyncWindow(opts, [1, 2, 3, 4, 5]))).toEqual(result);
  });
  it('can have separate size and options arguments', async () => {
    expect(
      await asyncUw(
        asyncWindow(
          3,
          {
            filler: 'x',
          },
          [1, 2, 3, 4, 5],
        ),
      ),
    ).toEqual([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 'x'], [5, 'x', 'x']]);
  });
  it('frames iterable (window equal to the sequence)', async () => {
    expect(await asyncUw(asyncWindow(5, [1, 2, 3, 4, 5]))).toEqual([
      [1, 2, 3, 4, 5],
      [2, 3, 4, 5, undefined],
      [3, 4, 5, undefined, undefined],
      [4, 5, undefined, undefined, undefined],
      [5, undefined, undefined, undefined, undefined],
    ]);
  });
  it('frames iterable (window bigger than the sequence)', async () => {
    expect(await asyncUw(asyncWindow(6, [1, 2, 3, 4, 5]))).toEqual([
      [1, 2, 3, 4, 5, undefined],
      [2, 3, 4, 5, undefined, undefined],
      [3, 4, 5, undefined, undefined, undefined],
      [4, 5, undefined, undefined, undefined, undefined],
      [5, undefined, undefined, undefined, undefined, undefined],
    ]);
  });
  it('frames iterable (window bigger than the sequence) with filler', async () => {
    expect(
      await asyncUw(
        asyncWindow(
          6,
          {
            filler: 'x',
          },
          [1, 2, 3, 4, 5],
        ),
      ),
    ).toEqual([
      [1, 2, 3, 4, 5, 'x'],
      [2, 3, 4, 5, 'x', 'x'],
      [3, 4, 5, 'x', 'x', 'x'],
      [4, 5, 'x', 'x', 'x', 'x'],
      [5, 'x', 'x', 'x', 'x', 'x'],
    ]);
  });
  it('frames iterable (window bigger than the sequence) 2', async () => {
    expect(await asyncUw(asyncWindow(7, [1, 2, 3, 4, 5]))).toEqual([
      [1, 2, 3, 4, 5, undefined, undefined],
      [2, 3, 4, 5, undefined, undefined, undefined],
      [3, 4, 5, undefined, undefined, undefined, undefined],
      [4, 5, undefined, undefined, undefined, undefined, undefined],
      [5, undefined, undefined, undefined, undefined, undefined, undefined],
    ]);
  });
});
