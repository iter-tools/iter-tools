/**
 * @generated-from ./deep-equal.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { deepEqual, wrap } from '../../..';
import { wrap as syncWrap } from '../../..';
describe('deepEqual', () => {
  describe('given no values', () => {
    it('throws', () => {
      let error;

      try {
        deepEqual();
      } catch (e) {
        error = e;
      }

      expect(error).toMatchSnapshot();
    });
  });
  describe('given primitives', () => {
    it('returns true if all values are equal by Object.is', () => {
      expect(deepEqual(1, 1)).toBe(true);
      expect(deepEqual(NaN, NaN)).toBe(true);
      expect(deepEqual('abc', 'abc')).toBe(true);
    });
    it('returns false if not all values are equal by Object.is', () => {
      expect(deepEqual(0, 0, -0)).toBe(false);
    });
  });
  describe('given iterables', () => {
    it('returns true if contents are equal', () => {
      expect(deepEqual(wrap([1]), wrap([1]))).toBe(true);
    });
  });
  describe('given null', () => {
    it('returns true if contents are equal', () => {
      expect(deepEqual(null, undefined, wrap([]))).toBe(true);
      expect(
        deepEqual(
          wrap([null, wrap([[]]), wrap([wrap([null])])]),
          wrap([[], wrap([undefined]), wrap([wrap([undefined])])]),
        ),
      ).toBe(true);
    });
  });
  describe('given objects', () => {
    it('returns true if entries are deep equal', () => {
      expect(
        deepEqual(
          {
            key: 'val',
          },
          {
            key: 'val',
          },
        ),
      ).toBe(true);
    });
  });
  describe('given nested iterables', () => {
    it('returns true if contents are deep equal', () => {
      expect(
        deepEqual(
          wrap([wrap([1]), wrap([wrap([wrap([2])])]), wrap([wrap([3])])]),
          wrap([wrap([1]), wrap([wrap([wrap([2])])]), wrap([wrap([3])])]),
        ),
      ).toBe(true);
    });
  });
  it('Deep compares inside objects by default', () => {
    expect(
      deepEqual(
        wrap([
          {
            a: wrap([1]),
          },
          {
            b: wrap([
              {
                c: wrap([3]),
              },
            ]),
          },
        ]),
        wrap([
          {
            a: wrap([1]),
          },
          {
            b: wrap([
              {
                c: wrap([3]),
              },
            ]),
          },
        ]),
      ),
    ).toBe(true);
  });
  it('returns false if the contents are not deep equal', () => {
    expect(
      deepEqual(
        wrap([wrap([1]), wrap([2]), wrap([3])]),
        wrap([wrap([1]), wrap([2]), wrap([3])]),
        wrap([wrap([1]), wrap([2]), null]),
      ),
    ).toBe(false);
  });
});
