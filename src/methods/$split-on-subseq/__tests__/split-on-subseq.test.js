/**
 * @generated-from ./$split-on-subseq.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { splitOnSubseq, toArray } from '../../..';
import { wrap, unwrapDeep } from '../../../test/helpers';

describe('splitOnSubseq', () => {
  describe('when source is empty', () => {
    it('yields no parts', () => {
      expect(toArray(splitOnSubseq(wrap([]), null))).toEqual([]);
      expect(toArray(splitOnSubseq(wrap([]), undefined))).toEqual([]);
      expect(toArray(splitOnSubseq(wrap([]), wrap([])))).toEqual([]);
    });
  });

  describe('when sequence is empty', () => {
    it('yields a single part with values from source', () => {
      expect(unwrapDeep(splitOnSubseq(null, wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
      expect(unwrapDeep(splitOnSubseq(undefined, wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
      expect(unwrapDeep(splitOnSubseq(wrap([]), wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
    });
  });

  describe('when sequence is not present in source', () => {
    it('yields a single part containing the values from source', () => {
      expect(unwrapDeep(splitOnSubseq(wrap([undefined]), wrap([1, 2, 3])))).toEqual([[1, 2, 3]]);
    });
  });

  describe('when sequence is equal to source', () => {
    it('yields two empty parts', () => {
      expect(unwrapDeep(splitOnSubseq(wrap([0, 0]), wrap([0, 0])))).toEqual([[], []]);
    });
  });

  describe('when sequence overlaps with itself in source', () => {
    it('only a single split is created', () => {
      expect(unwrapDeep(splitOnSubseq(wrap([0, 0]), wrap([1, 0, 0, 0, 2])))).toEqual([[1], [0, 2]]);
    });
  });

  describe('when sequence is present s times in source', () => {
    it('yields s+1 parts', () => {
      expect(unwrapDeep(splitOnSubseq([1, -1], wrap([1, 1, -1, 2, 1, -1, 3])))).toEqual([
        [1],
        [2],
        [3],
      ]);
    });
  });
});
