/**
 * @generated-from ./async-collate.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncCollate, asyncToArray } from '../../..';
describe('asyncCollate', () => {
  describe('by position', () => {
    it('starts at 0 with step 1 if given no config arguments', async () => {
      const iter = asyncCollate([1, 4, 7], [2, 5, 8], [3, 6, 9]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
    it('can have a configurable step', async () => {
      const iter = asyncCollate(2, [1, 4, 7], [3, 6, 9], [2, 5, 8]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
    it('can have a configurable start and step', async () => {
      const iter = asyncCollate(1, 2, [2, 5, 8], [1, 4, 7], [3, 6, 9]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
    it('can have start and step specified in a config object', async () => {
      const iter = asyncCollate(
        {
          start: 1,
          step: 1,
        },
        [3, 6, 9],
        [1, 4, 7],
        [2, 5, 8],
      );
      expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
    it('works with input iterables of different lengths', async () => {
      const iter = asyncCollate([], [1, 3], [2]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3]);
    });
  });
  describe('by comparison', () => {
    it('output is sorted if passed a comparator', async () => {
      const iter = asyncCollate((a, b) => b - a, [1, 8, 9], [4, 6, 7], [2, 3, 5]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
    it('works with input iterables of different lengths', async () => {
      const iter = asyncCollate((a, b) => b - a, [], [2, 3], [1]);
      expect(await asyncToArray(iter)).toEqual([1, 2, 3]);
    });
  });
});
