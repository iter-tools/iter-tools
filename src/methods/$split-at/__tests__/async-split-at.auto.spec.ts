/**
 * @generated-from ./async-split-at.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncSplitAt, asyncToArray } from '../../..';
import { asyncRange } from '../../../__tests__/async-range';
describe('asyncSplitAt', () => {
  describe('with positive index', () => {
    it('works when the halves are consumed in order', async () => {
      const [first, second] = asyncSplitAt(3, asyncRange(0, 6));
      expect([await asyncToArray(first), await asyncToArray(second)]).toEqual([
        [0, 1, 2],
        [3, 4, 5],
      ]);
    });
    it('works when the source is exhuasted while the first half is being consumed', async () => {
      const [first, second] = asyncSplitAt(3, asyncRange(0, 2));
      expect([await asyncToArray(first), await asyncToArray(second)]).toEqual([[0, 1], []]);
    });
    it('works when the source is exhuasted while the second half is being consumed', async () => {
      const [first, second] = asyncSplitAt(3, asyncRange(0, 4));
      expect([await asyncToArray(first), await asyncToArray(second)]).toEqual([[0, 1, 2], [3]]);
    });
  });
  describe('with negative index', () => {
    it('works when the halves are consumed in order', async () => {
      const [first, second] = asyncSplitAt(-3, asyncRange(0, 6));
      expect([await asyncToArray(first), await asyncToArray(second)]).toEqual([
        [0, 1, 2],
        [3, 4, 5],
      ]);
    });
    it('all values are in the first part when |index| is larger than source size', async () => {
      const [first, second] = asyncSplitAt(-3, asyncRange(0, 2));
      expect([await asyncToArray(first), await asyncToArray(second)]).toEqual([[0, 1], []]);
    });
  });
  it('allows only the second half to being consumed', async () => {
    const [, second] = asyncSplitAt(3, asyncRange(0, 6));
    expect(await asyncToArray(second)).toEqual([3, 4, 5]);
  });
  it('throws if only the first half is taken', async () => {
    let error;

    try {
      const [first] = asyncSplitAt(3, asyncRange(0, 6));
      await asyncToArray(first);
    } catch (e) {
      error = e;
    }

    expect(error).toMatchSnapshot();
  });
  it('throws when the second half is consumed before the first', async () => {
    const [first, second] = asyncSplitAt(3, asyncRange(0, 6));
    expect(await asyncToArray(second)).toEqual([3, 4, 5]);
    let error;

    try {
      await asyncToArray(first);
    } catch (e) {
      error = e;
    }

    expect(error).toMatchSnapshot();
  });
});
