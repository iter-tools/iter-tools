/**
 * @generated-from ./async-round-robin.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncRoundRobin, asyncToArray } from '../../..';

describe('asyncRoundRobin', () => {
  it('starts at 0 with step 1 if given no config arguments', async () => {
    const iter = asyncRoundRobin([1, 4, 7], [2, 5, 8], [3, 6, 9]);
    expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });

  it('can have a configurable step', async () => {
    const iter = asyncRoundRobin(2, [1, 4, 7], [3, 6, 9], [2, 5, 8]);
    expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });

  it('can have a configurable start and step', async () => {
    const iter = asyncRoundRobin(1, 2, [2, 5, 8], [1, 4, 7], [3, 6, 9]);
    expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });

  it('can have start and step specified in a config object', async () => {
    const iter = asyncRoundRobin({ start: 1, step: 1 }, [3, 6, 9], [1, 4, 7], [2, 5, 8]);
    expect(await asyncToArray(iter)).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
  });

  it('works with input iterables of different lengths', async () => {
    const iter = asyncRoundRobin([], [1, 3], [2]);
    expect(await asyncToArray(iter)).toEqual([1, 2, 3]);
  });
});
