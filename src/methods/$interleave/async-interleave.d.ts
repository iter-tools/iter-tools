/**
 * @generated-from ./$interleave.d.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import {
  AsyncSourceIterable,
  AsyncResultIterable,
  AsyncIterable,
} from '../../types/async-iterable';
import AsyncInterleaveBuffer from './internal/async-buffer'; // Without options:
// #############
// prettier-ignore

declare function asyncInterleave<T1, T2, R>(generateInterleaved: (canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2> | null>, b1: AsyncInterleaveBuffer<T1>, b2: AsyncInterleaveBuffer<T2>) => AsyncIterable<R>): (s1: AsyncSourceIterable<T1>, s2: AsyncSourceIterable<T2>) => AsyncResultIterable<R>;
declare function asyncInterleave<T1, T2, T3, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
  ) => AsyncIterable<R>,
): (
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
) => AsyncResultIterable<R>;
declare function asyncInterleave<T1, T2, T3, T4, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3 | T4> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
    b4: AsyncInterleaveBuffer<T4>,
  ) => AsyncIterable<R>,
): (
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
  s4: AsyncSourceIterable<T4>,
) => AsyncResultIterable<R>;
declare function asyncInterleave<T, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T> | null>,
    ...buffers: Array<AsyncInterleaveBuffer<T>>
  ) => AsyncIterable<R>,
): (...sources: Array<AsyncSourceIterable<T>>) => AsyncResultIterable<R>;
declare function asyncInterleave<T1, T2, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
  ) => AsyncIterable<R>,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
): AsyncResultIterable<R>;
declare function asyncInterleave<T1, T2, T3, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
  ) => AsyncIterable<R>,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
): AsyncResultIterable<R>;
declare function asyncInterleave<T1, T2, T3, T4, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3 | T4> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
    b4: AsyncInterleaveBuffer<T4>,
  ) => AsyncIterable<R>,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
  s4: AsyncSourceIterable<T4>,
): AsyncResultIterable<R>;
declare function asyncInterleave<T, R>(
  generateInterleaved: (
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T> | null>,
    ...buffers: Array<AsyncInterleaveBuffer<T>>
  ) => AsyncIterable<R>,
  ...sources: Array<AsyncSourceIterable<T>>
): AsyncResultIterable<R>; // With options:
// #############
// prettier-ignore

declare function asyncInterleave<O extends {}, T1, T2, R>(generateInterleaved: (options: O, canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2> | null>, b1: AsyncInterleaveBuffer<T1>, b2: AsyncInterleaveBuffer<T2>) => AsyncIterable<R>, options: O): (s1: AsyncSourceIterable<T1>, s2: AsyncSourceIterable<T2>) => AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T1, T2, T3, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
  ) => AsyncIterable<R>,
  options: O,
): (
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
) => AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T1, T2, T3, T4, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3 | T4> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
    b4: AsyncInterleaveBuffer<T4>,
  ) => AsyncIterable<R>,
  options: O,
): (
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
  s4: AsyncSourceIterable<T4>,
) => AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T> | null>,
    ...buffers: Array<AsyncInterleaveBuffer<T>>
  ) => AsyncIterable<R>,
  options: O,
): (...sources: Array<AsyncSourceIterable<T>>) => AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T1, T2, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
  ) => AsyncIterable<R>,
  options: O,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
): AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T1, T2, T3, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
  ) => AsyncIterable<R>,
  options: O,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
): AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T1, T2, T3, T4, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T1 | T2 | T3 | T4> | null>,
    b1: AsyncInterleaveBuffer<T1>,
    b2: AsyncInterleaveBuffer<T2>,
    b3: AsyncInterleaveBuffer<T3>,
    b4: AsyncInterleaveBuffer<T4>,
  ) => AsyncIterable<R>,
  options: O,
  s1: AsyncSourceIterable<T1>,
  s2: AsyncSourceIterable<T2>,
  s3: AsyncSourceIterable<T3>,
  s4: AsyncSourceIterable<T4>,
): AsyncResultIterable<R>;
declare function asyncInterleave<O extends {}, T, R>(
  generateInterleaved: (
    options: O,
    canTakeAny: () => Promise<AsyncInterleaveBuffer<T> | null>,
    ...buffers: Array<AsyncInterleaveBuffer<T>>
  ) => AsyncIterable<R>,
  options: O,
  ...sources: Array<AsyncSourceIterable<T>>
): AsyncResultIterable<R>;
export default asyncInterleave;
