/**
 * @generated-from ./interleave.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { Iterable } from '../../../types/iterable';
import { interleave, Peekerator, toArray } from '../../..';

describe('interleave', () => {
  const a = [1, 2, 3];
  const b = [4, 5, 6];
  const c = [7, 8, 9];

  it('can be used to implement a round robin interleave', () => {
    const roundRobin = interleave(function*(
      options: Record<string, any>,
      all: Peekerator<Peekerator<number>>,
      a: Peekerator<number>,
      b: Peekerator<number>,
      c: Peekerator<number>,
    ) {
      while (!all.done) {
        if (!a.done) {
          yield a.value;
          a.advance();
        }
        if (!b.done) {
          yield b.value;
          b.advance();
        }
        if (!c.done) {
          yield c.value;
          c.advance();
        }
      }
    });

    expect(toArray(roundRobin(a, b, c))).toEqual([1, 4, 7, 2, 5, 8, 3, 6, 9]);
  });

  it('can be passed options for the generator', () => {
    const options = {};

    expect.assertions(1);
    toArray(
      interleave(
        function*(o: Record<string, any>): Iterable<any> {
          expect(o).toBe(options);
        },
        options,
        null,
      ),
    );
  });

  describe('the value of the summary', () => {
    it('can be used to do concatenation', () => {
      const concatenate = interleave(function*(
        _: Record<string, any>,
        all: Peekerator<Peekerator<number>>,
      ) {
        while (!all.done) {
          const buffer = all.value;
          yield buffer.value;
          buffer.advance();
        }
      });

      expect(Array.from(concatenate(a, b, c))).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    });
  });
});
