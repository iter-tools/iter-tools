/**
 * @generated-from ./$interleave.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { AsyncIterable } from '../../../types/async-iterable';
import { asyncInterleave, AsyncPeekerator, asyncToArray } from '../../..';

describe('asyncInterleave', () => {
  const a = [1, 2, 3];
  const b = [4, 5, 6];
  const c = [7, 8, 9];

  it('can be used to implement a round robin interleave', async () => {
    const roundRobin = asyncInterleave(async function*(
      options: Record<string, any>,
      all: AsyncPeekerator<AsyncPeekerator<number>>,
      a: AsyncPeekerator<number>,
      b: AsyncPeekerator<number>,
      c: AsyncPeekerator<number>,
    ) {
      while (!all.done) {
        if (!a.done) {
          yield a.value;
          await a.advance();
        }
        if (!b.done) {
          yield b.value;
          await b.advance();
        }
        if (!c.done) {
          yield c.value;
          await c.advance();
        }
      }
    });

    expect(await asyncToArray(roundRobin(a, b, c))).toEqual([1, 4, 7, 2, 5, 8, 3, 6, 9]);
  });

  it('can be passed options for the generator', async () => {
    const options = {};

    expect.assertions(1);
    await asyncToArray(
      asyncInterleave(
        async function*(o: Record<string, any>): AsyncIterable<any> {
          expect(o).toBe(options);
        },
        options,
        null,
      ),
    );
  });
});
