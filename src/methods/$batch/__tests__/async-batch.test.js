/**
 * @generated-from ./$batch.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars,import/no-duplicates,no-constant-condition */

import { asyncBatch } from '../../..';
import { asyncWrap, asyncUnwrapDeep } from '../../../test/async-helpers';

describe('asyncBatch', () => {
  describe('when source is empty', () => {
    it('yields no items', async () => {
      expect(await asyncUnwrapDeep(asyncBatch(2, null))).toEqual([]);
      expect(await asyncUnwrapDeep(asyncBatch(2, undefined))).toEqual([]);
      expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has fewer than `size` values', () => {
    it('yields one incomplete batch', async () => {
      expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1])))).toEqual([[1]]);
    });
  });

  describe('when source has more than `size` values', () => {
    describe('which can be divided evenly into batches', () => {
      it('yields batches of `size` items', async () => {
        expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1, 2, 3, 4, 5, 6])))).toEqual([
          [1, 2],
          [3, 4],
          [5, 6],
        ]);
      });
    });

    describe('which cannot be divided evenly into batches', () => {
      it('yields batches of `size` items and one incomplete batch', async () => {
        expect(await asyncUnwrapDeep(asyncBatch(2, asyncWrap([1, 2, 3, 4, 5])))).toEqual([
          [1, 2],
          [3, 4],
          [5],
        ]);
      });
    });
  });

  it('errors when passed size <= 0', async () => {
    expect(() => asyncBatch(0, [])).toThrowErrorMatchingSnapshot();
  });
});
