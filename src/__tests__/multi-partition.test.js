/**
 * @generated-from ./$multi-partition.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars */

import { multiPartition, map, toArray, range, slice } from '../..'
import { OneTwoThreeIterable } from './__framework__/fixtures'
describe('multiPartition', () => {
  const allToArray = (...args) => toArray(map(toArray, args))

  const func = x => x % 4

  it('empty iterable', () => {
    const [a, b, c, d] = multiPartition(func, [])
    expect(allToArray(a, b, c, d)).toEqual(Array(4).fill([]))
  })
  it('range(16)', () => {
    const [a, b, c, d] = multiPartition(func, range(16))
    expect(allToArray(a, b, c, d)).toEqual([[0, 4, 8, 12], [1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15]])
  })
  it('range(16) unsorted', () => {
    const [a, b, c, d] = multiPartition(func, [10, 9, 2, 5, 0, 12, 3, 6, 8, 7, 14, 13, 15, 11, 4, 1])
    expect(allToArray(a, b, c, d)).toEqual([[0, 12, 8, 4], [9, 5, 13, 1], [10, 2, 6, 14], [3, 7, 15, 11]])
  })
  it('out-of-bound access returns empty iterables', () => {
    const iv = toArray(slice({
      start: 6,
      end: 8
    }, multiPartition(func, range(16))))
    expect(allToArray(...iv)).toEqual([[], []])
  })
  it('cleans up the iterable', () => {
    const oneTwoThree = new OneTwoThreeIterable()
    const [a, b] = multiPartition(x => x - 1, oneTwoThree)
    expect(oneTwoThree).toHaveProperty('isCleanedUp', false)
    a.next()
    expect(oneTwoThree).toHaveProperty('isCleanedUp', false)
    toArray(b) // exhausting a single partition will clean-up the original iterable

    expect(oneTwoThree).toHaveProperty('isCleanedUp', true)
  })
})
