/**
 * @generated-from ./execute.test.template.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars */

import { $execute, asyncExecute } from './async-fns'
const $methodName = 'asyncExecute'
describe($methodName, () => {
  it('executes forever', async () => {
    const iter = $execute(() => 1)
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
  })
  it('can be passed additional arguments', async () => {
    const iter = $execute((a, b) => a + b + 1, 4, 6)
    expect((await iter.next())).toEqual({
      value: 11,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 11,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 11,
      done: false
    })
  })
  it('executes forever (with promise value)', async () => {
    const iter = asyncExecute(() => Promise.resolve(1))
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
  })
})
