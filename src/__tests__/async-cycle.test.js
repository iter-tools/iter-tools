/**
 * @generated-from ./cycle.test.template.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars */

// Note: cycle is not templated so it is not in ./$fns
import { cycle, asyncCycle, range } from '..'
const $cycle = asyncCycle
const $methodName = 'asyncCycle'
describe($methodName, () => {
  it('return infinite cycle', async () => {
    const iter = $cycle([1, 2, 3])[Symbol.asyncIterator]()
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 2,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 3,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 2,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 3,
      done: false
    })
  })
  it('return infinite cycle (from iterator)', async () => {
    const iter = $cycle(range(3))[Symbol.asyncIterator]()
    expect((await iter.next())).toEqual({
      value: 0,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 2,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 0,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 1,
      done: false
    })
    expect((await iter.next())).toEqual({
      value: 2,
      done: false
    })
  })
  it('can be reused', async () => {
    const myCycle = $cycle(range(3))
    const iter1 = myCycle[Symbol.asyncIterator]()
    expect((await iter1.next())).toEqual({
      value: 0,
      done: false
    })
    expect((await iter1.next())).toEqual({
      value: 1,
      done: false
    })
    const iter2 = myCycle[Symbol.asyncIterator]()
    expect((await iter2.next())).toEqual({
      value: 0,
      done: false
    })
    expect((await iter2.next())).toEqual({
      value: 1,
      done: false
    })
  })
})
