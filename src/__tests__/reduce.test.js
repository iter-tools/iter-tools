/**
 * @generated-from ./reduce.test.template.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars */

import { $reduce, asyncReduce, reduce, range } from './fns'
import { OneTwoThreeIterable, AsyncOneTwoThreeIterable } from './__framework__/fixtures'
const $methodName = 'reduce'
const $OneTwoThreeIterable = OneTwoThreeIterable
describe($methodName, () => {
  it('sums an array', () => {
    const sum = $reduce((acc = 0, x) => acc + x, [0, 1, 2, 3])
    expect(sum).toBe(6)
  })
  it('sums a range', () => {
    const sum = $reduce((acc = 0, x) => acc + x, range(4))
    expect(sum).toBe(6)
  })
  it('sums using a specified initial value', () => {
    const sum = $reduce(1, (acc, x) => acc + x, range(4))
    expect(sum).toBe(7)
  })
  it('sums using the initial value as the initial value', () => {
    const sum = $reduce((acc, x) => acc + x, range({
      start: 2,
      end: 4
    }))
    expect(sum).toBe(5)
  })
  it('returns specified initial value when iterable is empty', () => {
    const sum = $reduce(0, (acc, x) => acc + x, [])
    expect(sum).toBe(0)
  })
  it('throws when no initial value specified and iterable is empty', () => {
    expect(() => {
      reduce((acc, x) => acc + x, [])
    }).toThrow()
  })
  it('sums a range (using curry)', () => {
    const sum = $reduce((acc = 0, x) => acc + x)
    expect(sum(range(4))).toBe(6)
  })
  it('cleans up iterable', () => {
    const oneTwoThree = new $OneTwoThreeIterable()

    try {
      $reduce((acc = 0, x) => {
        throw new Error('ops')
      }, oneTwoThree)
    } catch (e) {
      expect(oneTwoThree).toHaveProperty('isCleanedUp', true)
    }
  })
})
