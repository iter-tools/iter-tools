/**
 * @generated-from ./async-multi-partition.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { AsyncIterableIterator } from '../internal/async-iterable';
import { asyncMultiPartition, asyncMap, asyncToArray, range, slice } from '..';
import { AsyncOneTwoThreeIterable } from './__framework__/fixtures';
describe('asyncMultiPartition', () => {
  const allToArray = (...args: Array<AsyncIterableIterator<number>>) =>
    asyncToArray(asyncMap(asyncToArray, args));

  const func = (x: number) => x % 4;

  it('empty iterable', async () => {
    const [a, b, c, d] = asyncMultiPartition(func, []);
    expect(await allToArray(a, b, c, d)).toEqual(Array(4).fill([]));
  });
  it('range(16)', async () => {
    const [a, b, c, d] = asyncMultiPartition(func, range(16));
    expect(await allToArray(a, b, c, d)).toEqual([
      [0, 4, 8, 12],
      [1, 5, 9, 13],
      [2, 6, 10, 14],
      [3, 7, 11, 15],
    ]);
  });
  it('range(16) unsorted', async () => {
    const [a, b, c, d] = asyncMultiPartition(func, [
      10,
      9,
      2,
      5,
      0,
      12,
      3,
      6,
      8,
      7,
      14,
      13,
      15,
      11,
      4,
      1,
    ]);
    expect(await allToArray(a, b, c, d)).toEqual([
      [0, 12, 8, 4],
      [9, 5, 13, 1],
      [10, 2, 6, 14],
      [3, 7, 15, 11],
    ]);
  });
  it('out-of-bound access returns empty iterables', async () => {
    const iv = await asyncToArray(
      slice(
        {
          start: 6,
          end: 8,
        },
        asyncMultiPartition(func, range(16)),
      ),
    );
    expect(await allToArray(...iv)).toEqual([[], []]);
  });
  it('cleans up the iterable', async () => {
    const oneTwoThree = new AsyncOneTwoThreeIterable();
    const [a, b] = asyncMultiPartition(x => x - 1, oneTwoThree);
    expect(oneTwoThree).toHaveProperty('isCleanedUp', false);
    await a.next();
    expect(oneTwoThree).toHaveProperty('isCleanedUp', false);
    await asyncToArray(b);
    expect(oneTwoThree).toHaveProperty('isCleanedUp', true);
  });
});
