/**
 * @generated-from ./$group-by.test.js
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

/* eslint-disable no-unused-vars */

import { $groupBy, groupBy, asyncGroupBy, $toArray } from './async-fns'
const methodName = 'asyncGroupBy'
describe(methodName, () => {
  it('main cursor', async () => {
    const iter = $groupBy(undefined, 'AAABBAACCCCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('A')
    next = await iter.next()
    expect(next.value[0]).toBe('B')
    next = await iter.next()
    expect(next.value[0]).toBe('A')
    next = await iter.next()
    expect(next.value[0]).toBe('C')
    next = await iter.next()
    expect(next.value[0]).toBe('D')
    next = await iter.next()
    expect(next.done).toBe(true)
  })
  it('with key function', async () => {
    const iter = $groupBy(item => item.toLowerCase(), 'AaaBbaACccCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('a')
    next = await iter.next()
    expect(next.value[0]).toBe('b')
    next = await iter.next()
    expect(next.value[0]).toBe('a')
    next = await iter.next()
    expect(next.value[0]).toBe('c')
    next = await iter.next()
    expect(next.value[0]).toBe('d')
    next = await iter.next()
    expect(next.done).toBe(true)
  })
  it('main cursor (curried)', async () => {
    const iter = $groupBy()('AAABBAACCCCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('A')
    next = await iter.next()
    expect(next.value[0]).toBe('B')
    next = await iter.next()
    expect(next.value[0]).toBe('A')
    next = await iter.next()
    expect(next.value[0]).toBe('C')
    next = await iter.next()
    expect(next.value[0]).toBe('D')
    next = await iter.next()
    expect(next.done).toBe(true)
  })
  it('secondary', async () => {
    const iter = $groupBy(undefined, 'AAABBAACCCCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('A')
    expect((await $toArray(next.value[1]))).toEqual(['A', 'A', 'A'])
    next = await iter.next()
    expect(next.value[0]).toBe('B')
    expect((await $toArray(next.value[1]))).toEqual(['B', 'B'])
    next = await iter.next()
    expect(next.value[0]).toBe('A')
    expect((await $toArray(next.value[1]))).toEqual(['A', 'A'])
    next = await iter.next()
    expect(next.value[0]).toBe('C')
    expect((await $toArray(next.value[1]))).toEqual(['C', 'C', 'C', 'C'])
    next = await iter.next()
    expect(next.value[0]).toBe('D')
    expect((await $toArray(next.value[1]))).toEqual(['D'])
    next = await iter.next()
    expect(next.done).toBe(true)
  })
  it('secondary (consume partially)', async () => {
    const iter = $groupBy(undefined, 'AAABBAACCCCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('A')
    expect((await next.value[1].next()).value).toBe('A')
    expect((await next.value[1].next()).value).toBe('A')
    expect((await next.value[1].next()).value).toBe('A')
    expect((await next.value[1].next()).done).toBe(true)
    next = await iter.next()
    expect(next.value[0]).toBe('B')
    next = await iter.next()
    expect(next.value[0]).toBe('A')
  })
  it('null returns empty iterable', async () => {
    expect((await $toArray($groupBy(undefined, null)))).toEqual([])
  })
  it('groupBy of undefined returns empty iterable', async () => {
    expect((await $toArray($groupBy(undefined, undefined)))).toEqual([])
  })
  it('groupBy of undefined returns empty iterable 2', async () => {
    expect((await $toArray($groupBy(undefined)))).toEqual([])
  })
  it('groupBy of undefined returns empty iterable 3', async () => {
    expect((await $toArray($groupBy()(undefined)))).toEqual([])
  })
  it('uses key function returning a promise', async () => {
    const iter = asyncGroupBy(async item => item.toLowerCase(), 'AaaBbaACccCD')
    let next = await iter.next()
    expect(next.value[0]).toBe('a')
    next = await iter.next()
    expect(next.value[0]).toBe('b')
    next = await iter.next()
    expect(next.value[0]).toBe('a')
    next = await iter.next()
    expect(next.value[0]).toBe('c')
    next = await iter.next()
    expect(next.value[0]).toBe('d')
    next = await iter.next()
    expect(next.done).toBe(true)
  })
})
